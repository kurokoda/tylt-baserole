apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: rethinkdb
  name: rethinkdb
spec:
  replicas: REPLICAS_VAR
  serviceName: rethinkdb
  template:
    metadata:
      labels:
        app: rethinkdb 
    spec:
      containers:

      #RethinkDB statefulset
      - image: rosskukulinski/rethinkdb-kubernetes:2.3.5
        imagePullPolicy: Always
        name: rethinkdb
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: RETHINK_CLUSTER
          value: rethinkdb
        - name: USE_SERVICE_LOOKUP
          value: "yes"
        ports:
        - containerPort: 8080
          name: admin
        - containerPort: 28015
          name: driver
        - containerPort: 29015
          name: cluster
        volumeMounts:
        - mountPath: /data
          name: data
        resources:
          limits:
            cpu: 150m
            memory: 2.0Gi
          requests:
            cpu: 100m
            memory: 150Mi
        livenessProbe: &healthcheck
          exec:
            command:
              - /probe
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          <<: *healthcheck

      #RethinkDB node sidecar
      - image: beevelop/nodejs-python-ruby 
        imagePullPolicy: Always
        name: rethinkdb-sidecar
        command:
        - /bin/bash
        - -ec
        - |
          LATEST_DUMP=$(ls -Art /mnt/backups/*.tar.gz | tail -n1)
          HOSTNAME=$(hostname)
          SET_ID=${HOSTNAME/*-/}
          SHARDS=$((SET_ID + 1))
          
          npm install -g recli
          pip install rethinkdb
          
          if recli --host localhost --port 28015 'r.db("tyltInbox").info()'; then
            recli --host localhost --port 28015 "r.db('tyltInbox').table('messages_twitter').reconfigure({shards: $SHARDS, replicas: $SHARDS})"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('messages_twitter').rebalance()"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('messages_facebook').reconfigure({shards: $SHARDS, replicas: $SHARDS})"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('messages_facebook').rebalance()"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('polls_facebook').reconfigure({shards: $SHARDS, replicas: $SHARDS})"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('polls_facebook').rebalance()"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('manual_votes').reconfigure({shards: $SHARDS, replicas: $SHARDS})"
            recli --host localhost --port 28015 "r.db('tyltInbox').table('manual_votes').rebalance()"
          else
            if [ "$NAMESPACE" = "devint" ] || [ "$NAMESPACE" = "production" ]; then
              /usr/local/bin/rethinkdb-restore $LATEST_DUMP -c localhost:28015 --clients 16 --force
            else
              recli --host localhost --port 28015 'r.dbCreate("tyltInbox")' || echo $?
              recli --host localhost --port 28015 --database tyltInbox 'r.tableCreate("messages_twitter")' || echo $?
              recli --host localhost --port 28015 --database tyltInbox 'r.tableCreate("messages_facebook")' || echo $?
              recli --host localhost --port 28015 --database tyltInbox 'r.tableCreate("polls_facebook")' || echo $?
              recli --host localhost --port 28015 --database tyltInbox 'r.tableCreate("manual_votes")' || echo $?
            fi
          fi
          while [ 1 -eq 1 ]; do sleep 10; done
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: backup-dir
          mountPath: /mnt/backups
          readOnly: PRODUCTION_VAR
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              ! pgrep -f "/usr/bin/[p]ython /usr/local/bin/rethinkdb-restore"
          initialDelaySeconds: 10
          periodSeconds: 10
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: data
        emptyDir: {}
      - name: backup-dir
        hostPath:
          path: /mnt/s3-backup-share/tylt-rethink-prod
